# -*- coding: utf-8 -*-
"""NETFLIX DATA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_YCweWWi-_bft5ZeA2GZa3UL7GrFrX4W
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv("NETFLIX DATA.csv")

df

df.info()

df.head()

df.columns

df.info()

df.describe()

df[df.duplicated()]

missing_values=df.isnull().sum()

#sort the missing value
missing_values=missing_values.sort_values(ascending=False)
#delete the missing values
missing_values=missing_values.drop(missing_values.index[0])
missing_values.plot(kind="barh",colormap="viridis",grid=True,figsize=(10,5),edgecolor="black",linewidth=2,xlabel="number of missing values",ylabel="columns names",title="missing values of for each columns")

missing_values

df.type.value_counts()

df["startYear"]=df["startYear"].fillna("unknown")
df["episodes"]=df["episodes"].fillna("nodata")
df["certificate"]=df["certificate"].fillna("no certificate")
df["numVotes"]=df["numVotes"].fillna("No rate")
df["rating"]=df["rating"].fillna("No rating")
df["runtime"]=df["runtime"].fillna("unknown")
df["language"]=df["language"].fillna("unknown")
df["genres"]=df["genres"].fillna("No genre")
df["type"]=df["type"].fillna("unknown")
df["plot"]=df["plot"].fillna("No data")

df.type.value_counts()

#fill the end year in case of serie
df.loc[(df['type'].isin(['tvSeries', 'tvEpisode', 'tvSpecial', 'tvMiniSeries'])), 'endYear'] = df['endYear'].fillna('Still Showing')
#fill the endyear in case of a (film)
df.loc[(df['type'].isin(['movie', 'short', 'tvMovie', 'video', 'videoGame', 'tvShort'])), 'endYear'] = df['endYear'].fillna(df['startYear'])

df.loc[(df["type"].isin(["tvseries","tvepisode","tvserial","tvMiniSeries"])),"endYear"]=df["endYear"].fillna(df["startYear"])
df.loc[(df['type'].isin(['movie', 'short', 'tvMovie', 'video', 'videoGame', 'tvShort'])), 'endYear'] = df['endYear'].fillna(df['startYear'])

missing_values=df.isnull().sum()

missing_values

df[df.endYear.isnull()]

df.loc[(df["type"]=="NO Type"),"endYear"]=df["endYear"].fillna("Unknown")

df = df.dropna(subset=['endYear'])
print(df)









df = df.dropna(subset=['endYear'])

df.isnull().sum()

# eda
movies = df.loc[df["type"].isin(["movie","short","tvMovie""video","videoGame","tvshort"])].shape[0]
tv_shows=df.loc[df["type"].isin(["tvseries","tvEpisode","tvSpecial","tvMiniSeries"])].shape[0]

labels=["Movies","TvShows"]
sizes=[movies,tv_shows]
colors=["#ff9999","#abcdef"]
plt.pie(sizes,labels=labels,colors=colors,autopct="%1.1f%%",startangle=90,shadow=True)
# create a pie chart
plt.title("Movies vs Tv Shows")
plt.axis()

df.orign_country.value_

filtered_df=df[df["orign_country"]!="-"]

most_disc_country=filtered_df["orign_country"].value_counts().head(10)

most_disc_country

most_disc_country=filtered_df["orign_country"].value_counts().head(10)
most_disc_country.plot(kind="bar",color="#45aabb")
plt.title('Top 10 Most Produced Countries')
plt.xlabel('Country')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.grid(axis="y",linestyle="--")
plt.figure(figsize=(10,6),dpi=80)
plt.show()

# group the dataframe by start year ,aand count how many rows we have for each year
df_StartYear=df.groupby("startYear")["imdb_id"].count()
df_StartYear

df_StartYear=df_StartYear[df_StartYear.index!="Unknown"]
df_StartYear=df_StartYear[df_StartYear.index!="Uknown"]
years=df_StartYear.index.to_list()

# create the figure and set the figure siz
plt.figure(figsize=(10,6))
plt.plot(df_StartYear[36:],'c-',marker='.')

# Convert the 'startYear' index to numeric, handling errors
df_StartYear.index = pd.to_numeric(df_StartYear.index, errors='coerce')

# Remove rows with NaN index values (resulting from 'unknown' conversion)
df_StartYear = df_StartYear.dropna()

# Now plot the data
plt.figure(figsize=(10, 6))
plt.plot(df_StartYear.index, df_StartYear.values, 'c-', marker='.')
plt.title('Number of Movies/Shows per Year')
plt.xlabel('Year')
plt.ylabel('Count')
plt.grid(True)
plt.show()

# replace nan
import numpy as np
df.runtime.replace("\\N" ,np.nan,inplace=True)

tv_shows = df.loc[(df['runtime'] != 'Unknown') & (df['type'].isin(['tvSeries', 'tvEpisode', 'tvSpecial', 'tvMiniSeries']))]
movies = df.loc[(df['runtime'] != 'Unknown') & (df['type'].isin(['movie', 'short', 'tvMovie', 'video', 'videoGame', 'tvShort']))]

# convert runtime column to float
movies.loc[:,"runtime"]=movies["runtime"].astype(float)
tv_shows.loc[:,"runtime"]=tv_shows["runtime"].astype(float)
 #grou by =-
movies_runtimeYear=movies.groupby("startYear")[["runtime"]].mean()
tv_shows_runtimeYear=tv_shows.groupby("startYear")[["runtime"]].mean()

movies_runtimeYear

#remove the unkown runtime rows we have just 2 rows we can easily remove them without any chanfe for our graph
movies=df.loc[(df["runtime"]!="unknown")&(df["type"].isin(["movie","short","tvMovie","video","videoGame","tvShort"]))]
tv_shows=df.loc[(df["runtime"]!="unknown") &(df["type"].isin(["tvseries","tvEpisode","tvserial","tvMiniSeries"]))]
# convert run time column to float type using .loc
movies.loc[:,"runtime"]=movies["runtime"].astype(float)
tv_shows.loc[:,"runtime"]=tv_shows["runtime"].astype(float)
#group by the dataframe by start year and shows the runtime for each year
movie_runtimeYear = movies.groupby('startYear')[['runtime']].mean()
tv_shows_runtimeYear = tv_shows.groupby('startYear')[['runtime']].mean()
#display  the last 15 year
last_fifteen_rows_movies=movie_runtimeYear.iloc[-15:]
last_fifteen_rows_tv_shows=tv_shows_runtimeYear.iloc[-15:]
# potting the data
plt.plot(last_fifteen_rows_movies,"r--",marker=".",label="Movies")

plt.plot(last_fifteen_rows_tvshows,"c--",marker=".",label="TvShows")

# Adding labels and title
plt.xlabel('Start Year')
plt.ylabel('Average Minutes')
plt.title('Average Minutes of Movies and TV Shows in the last 15 years')

# Adding grid lines
plt.grid(True, linestyle='--', alpha=0.5)

# Customizing tick labels
plt.xticks(last_fifteen_rows_movies.index.to_list(), rotation=45)

# Adding legend
plt.legend()
plt.tight_layout()
# Display the plot
plt.show()

last_fifteen_rows_tv_shows

import pandas as pd
import matplotlib.pyplot as plt

# Remove rows with 'Unknown' runtime and store movies and TV shows separately
movies = df.loc[(df['runtime'].str.lower() != 'unknown') &
                (df['type'].isin(['movie', 'short', 'tvMovie', 'video', 'videoGame', 'tvShort']))]

tv_shows = df.loc[(df['runtime'].str.lower() != 'unknown') &
                  (df['type'].isin(['tvSeries', 'tvEpisode', 'tvSpecial', 'tvMiniSeries']))]

# Convert the runtime column to float type
movies.loc[:, 'runtime'] = pd.to_numeric(movies['runtime'], errors='coerce')
tv_shows.loc[:, 'runtime'] = pd.to_numeric(tv_shows['runtime'], errors='coerce')

# Group the dataframe by start year and calculate mean runtime
movie_runtimeYear = movies.groupby('startYear')[['runtime']].mean()
tv_shows_runtimeYear = tv_shows.groupby('startYear')[['runtime']].mean()

# Remove rows where the start year is 'Unknown' and ensure the index is numeric
movie_runtimeYear = movie_runtimeYear[pd.to_numeric(movie_runtimeYear.index, errors='coerce').notna()]
tv_shows_runtimeYear = tv_shows_runtimeYear[pd.to_numeric(tv_shows_runtimeYear.index, errors='coerce').notna()]

# Convert index to integer
movie_runtimeYear.index = movie_runtimeYear.index.astype(int)
tv_shows_runtimeYear.index = tv_shows_runtimeYear.index.astype(int)

# Select only the last 15 years
last_fifteen_rows_movies = movie_runtimeYear.iloc[-15:]
last_fifteen_rows_tv_shows = tv_shows_runtimeYear.iloc[-15:]

# Plotting the data
plt.plot(last_fifteen_rows_movies, 'r--', marker=".", label='Movies')
plt.plot(last_fifteen_rows_tv_shows, 'c--', marker=".", label='TV Shows')

# Adding labels and title
plt.xlabel('Start Year')
plt.ylabel('Average Minutes')
plt.title('Average Minutes of Movies and TV Shows in the Last 15 Years')

# Adding grid lines
plt.grid(True, linestyle='--', alpha=0.5)

# Customizing tick labels
plt.xticks(last_fifteen_rows_movies.index.to_list(), rotation=45)

# Adding legend
plt.legend()
plt.tight_layout()

# Display the plot
plt.show()

df.genres.replace(r"\N",np.nan,inplace=True)
df.genres[df.genres==r"\N"].count()

df['genres'] = df['genres'].str.replace(',', ' & ')

# Filtering data for movies and TV shows separately
df_genres_movie = df[df['type'].isin(['movie', 'short', 'tvMovie', 'video', 'videoGame'])]
df_genres_tvshows = df[df['type'].isin(['tvSeries', 'tvEpisode', 'tvSpecial', 'tvMiniSeries', 'tvShort'])]

# Grouping the genres and counting the number of movies and TV shows for each genre
movies_genre = df_genres_movie.groupby('genres')['imdb_id'].count()
tvshows_genre = df_genres_tvshows.groupby('genres')['imdb_id'].count()
# data
movies_genre=movies_genre.sort_values(ascending=False)[:20]
tvshows_genre=tvshows_genre.sort_values(ascending=False)[:20]
 # filter the genres value for movies & tvshoes

# Get genres present in both movies and TV shows
common_genres = movies_genre.index.intersection(tvshows_genre.index)

# Filter the genres for movies and TV shows
movies_genre_common = movies_genre.loc[common_genres]
tvshows_genre_common = tvshows_genre.loc[common_genres]
# create the position for the ticks labels
x=np.arange(len(common_genres))
width=0.35
fig,ax=plt.subplots(figsize=(10,6))

# Assign the return values of ax.barh to bars_movies and bars_tvshows
bars_movies = ax.barh(x,movies_genre_common,width,label="Movies",color="skyblue") # Assign to bars_movies
bars_tvshows = ax.barh(x+width,tvshows_genre_common,width,label="TvShows",color="lightcoral") # Assign to bars_tvshows


# adding labels
ax.set_xlabel("count",fontsize=12)
ax.set_ylabel("genres",fontsize=12)
ax.set_title("Top genres for movies and tv shows")
ax.set_yticks(x+width/2)
ax.set_yticklabels(common_genres,fontsize=10)
ax.legend()
ax.grid(axis="x",linestyle="--")
plt.tight_layout()


for bar_m, bar_t in zip(bars_movies, bars_tvshows):
    # Add label for Movies
    ax.text(bar_m.get_width() + 1, bar_m.get_y() + bar_m.get_height()/2,
            f"{int(bar_m.get_width())}", ha="left", va="center", fontsize=10, color="black")

    # Add label for TV Shows
    ax.text(bar_t.get_width() + 1, bar_t.get_y() + bar_t.get_height()/2,
            f"{int(bar_t.get_width())}", ha="left", va="center", fontsize=10, color="green")

plt.show()

df.rating=df.rating[df.rating!="No rate "]
df.numVotes=df.numVotes[df.numVotes!="No Votes"]
df.startYear=df.startYear[df.startYear!="Unknown"]
# group the filter the data by start year and calculte the meean of rating and sum of num of votes
rate_per_Year=df.groupby("startYear").agg({"rating":"mean","numVotes":"sum"})

# Convert to proper types and remove invalid entries
df = df[df['rating'] != "No rate "]
df = df[df['numVotes'] != "No Votes"]
df = df[df['startYear'] != "Unknown"]

# Convert columns to numeric
df['rating'] = pd.to_numeric(df['rating'], errors='coerce')  # Convert rating to float
df['numVotes'] = pd.to_numeric(df['numVotes'], errors='coerce')  # Convert numVotes to int
df['startYear'] = pd.to_numeric(df['startYear'], errors='coerce')  # Convert startYear to int

# Drop rows with NaN values after conversion
df = df.dropna(subset=['rating', 'numVotes', 'startYear'])

# Group by start year and calculate mean rating & sum of votes
rate_per_Year = df.groupby("startYear").agg({"rating": "mean", "numVotes": "sum"})

# Display output
print(rate_per_Year)

import pandas as pd

# Convert columns to numeric (invalid values become NaN)
df[['rating', 'numVotes', 'startYear']] = df[['rating', 'numVotes', 'startYear']].apply(pd.to_numeric, errors='coerce')

# Drop rows with NaN values in key columns
df = df.dropna(subset=['rating', 'numVotes', 'startYear'])

# Group by 'startYear' and calculate mean rating & sum of numVotes
rate_per_year = df.groupby('startYear', as_index=True).agg({'rating': 'mean', 'numVotes': 'sum'})

# Keep only the last 15 years up to 2021
rate_per_year = rate_per_year.loc[:2021].tail(15)

# Display result
print(rate_per_year)

import pandas as pd
# convertt intop numeric values
df[["rating","numvotes","startYear"]]=df[["rating",'numVotes',"startYear"]].apply(pd.to_numeric,errors="coerce")
# convert roes with nan values in key column
df=df.dropna(subset=["rating","numVotes","startYear"])
# grip filtered by start year and calculate the mean of rating and sum of num votes
rate_per_year=df.groupby("startYear").agg({"rating":"mean","numVotes":"sum"})
# select just 15 yeats untill 2021
rate_per_year=rate_per_year.loc[:2021].tail(15)

rate_per_year

# create a figure object and plot the data
fig,ax1=plt.subplots(figsize=(11,6))
ax1.plot(rate_per_year["rating"],label="Rating",color="#852852",marker="o",linestyle="-",linewidth=2)
# set  the y axis label dfot the line chart
ax1.set_ylabel("Rating")
# create the second y axis fot the bar chart
ax2=ax1.twinx()
# plot the numvotes column as a barchart with label number of votes
ax2.bar(rate_per_year.index,rate_per_year["numVotes"],label="Number of votes",color="skyblue",alpha=0.7)
# set the x axis and y axis label for bar chart
ax1.set_xticks(rate_per_year.index)
ax2.set_xticklabels(rate_per_year.index.astype(int),rotation=45)
# add legend tot the plot
lines,labels=ax1.get_legend_handles_labels()
bars,bar_labels=ax2.get_legend_handles_labels() # changed bar_label to bar_labels
ax1.legend(lines+bars,labels+bar_labels,loc="upper right") # changed loc to "upper right"
#add title
plt.title("The Average Rating with the Number of Votes in the Last 15 Years")

# Add grid lines
plt.grid()

# Show the plot
plt.show()

